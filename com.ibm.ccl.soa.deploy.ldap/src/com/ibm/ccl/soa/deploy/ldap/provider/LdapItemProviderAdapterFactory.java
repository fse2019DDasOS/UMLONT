/*******************************************************************************
 * Copyright (c) 2003, 2007 IBM Corporation Licensed Material - Property of IBM. All rights reserved.
 *  
 * US Government Users Restricted Rights - Use, duplication or disclosure v1.0 restricted by GSA ADP
 * Schedule Contract with IBM Corp.
 * 
 * Contributors: IBM Corporation - initial API and implementation
 *******************************************************************************/
package com.ibm.ccl.soa.deploy.ldap.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.ibm.ccl.soa.deploy.ldap.util.LdapAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * @generated
 */
public class LdapItemProviderAdapterFactory extends LdapAdapterFactory implements
		ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public LdapItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.EPerson} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EPersonItemProvider ePersonItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.EPerson}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEPersonAdapter() {
		if (ePersonItemProvider == null) {
			ePersonItemProvider = new EPersonItemProvider(this);
		}

		return ePersonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.InetOrgPerson} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InetOrgPersonItemProvider inetOrgPersonItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.InetOrgPerson}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInetOrgPersonAdapter() {
		if (inetOrgPersonItemProvider == null) {
			inetOrgPersonItemProvider = new InetOrgPersonItemProvider(this);
		}

		return inetOrgPersonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapServer} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected LdapServerItemProvider ldapServerItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapServer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLdapServerAdapter() {
		if (ldapServerItemProvider == null) {
			ldapServerItemProvider = new LdapServerItemProvider(this);
		}

		return ldapServerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapClient} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected LdapClientItemProvider ldapClientItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapClient}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdapClientAdapter() {
		if (ldapClientItemProvider == null) {
			ldapClientItemProvider = new LdapClientItemProvider(this);
		}

		return ldapClientItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapClientUnit} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected LdapClientUnitItemProvider ldapClientUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapClientUnit}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdapClientUnitAdapter() {
		if (ldapClientUnitItemProvider == null) {
			ldapClientUnitItemProvider = new LdapClientUnitItemProvider(this);
		}

		return ldapClientUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapDeployRoot} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected LdapDeployRootItemProvider ldapDeployRootItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapDeployRoot}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdapDeployRootAdapter() {
		if (ldapDeployRootItemProvider == null) {
			ldapDeployRootItemProvider = new LdapDeployRootItemProvider(this);
		}

		return ldapDeployRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LdapEntryItemProvider ldapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLdapEntryAdapter() {
		if (ldapEntryItemProvider == null) {
			ldapEntryItemProvider = new LdapEntryItemProvider(this);
		}

		return ldapEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapEntryUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LdapEntryUnitItemProvider ldapEntryUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapEntryUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLdapEntryUnitAdapter() {
		if (ldapEntryUnitItemProvider == null) {
			ldapEntryUnitItemProvider = new LdapEntryUnitItemProvider(this);
		}

		return ldapEntryUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapLdif} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected LdapLdifItemProvider ldapLdifItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapLdif}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdapLdifAdapter() {
		if (ldapLdifItemProvider == null) {
			ldapLdifItemProvider = new LdapLdifItemProvider(this);
		}

		return ldapLdifItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapLdifUnit} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected LdapLdifUnitItemProvider ldapLdifUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapLdifUnit}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdapLdifUnitAdapter() {
		if (ldapLdifUnitItemProvider == null) {
			ldapLdifUnitItemProvider = new LdapLdifUnitItemProvider(this);
		}

		return ldapLdifUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapSchema} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected LdapSchemaItemProvider ldapSchemaItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapSchema}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdapSchemaAdapter() {
		if (ldapSchemaItemProvider == null) {
			ldapSchemaItemProvider = new LdapSchemaItemProvider(this);
		}

		return ldapSchemaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapSchemaUnit} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected LdapSchemaUnitItemProvider ldapSchemaUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapSchemaUnit}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdapSchemaUnitAdapter() {
		if (ldapSchemaUnitItemProvider == null) {
			ldapSchemaUnitItemProvider = new LdapSchemaUnitItemProvider(this);
		}

		return ldapSchemaUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapSuffix} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected LdapSuffixItemProvider ldapSuffixItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapSuffix}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdapSuffixAdapter() {
		if (ldapSuffixItemProvider == null) {
			ldapSuffixItemProvider = new LdapSuffixItemProvider(this);
		}

		return ldapSuffixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapSuffixUnit} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected LdapSuffixUnitItemProvider ldapSuffixUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapSuffixUnit}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdapSuffixUnitAdapter() {
		if (ldapSuffixUnitItemProvider == null) {
			ldapSuffixUnitItemProvider = new LdapSuffixUnitItemProvider(this);
		}

		return ldapSuffixUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdapServerUnit} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	protected LdapServerUnitItemProvider ldapServerUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdapServerUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLdapServerUnitAdapter() {
		if (ldapServerUnitItemProvider == null) {
			ldapServerUnitItemProvider = new LdapServerUnitItemProvider(this);
		}

		return ldapServerUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.LdifArtifact} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected LdifArtifactItemProvider ldifArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.LdifArtifact}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createLdifArtifactAdapter() {
		if (ldifArtifactItemProvider == null) {
			ldifArtifactItemProvider = new LdifArtifactItemProvider(this);
		}

		return ldifArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.Organization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganizationItemProvider organizationItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.Organization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOrganizationAdapter() {
		if (organizationItemProvider == null) {
			organizationItemProvider = new OrganizationItemProvider(this);
		}

		return organizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.OrganizationalPerson} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganizationalPersonItemProvider organizationalPersonItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.OrganizationalPerson}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOrganizationalPersonAdapter() {
		if (organizationalPersonItemProvider == null) {
			organizationalPersonItemProvider = new OrganizationalPersonItemProvider(this);
		}

		return organizationalPersonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.SchemaArtifact} instances.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	protected SchemaArtifactItemProvider schemaArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.SchemaArtifact}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter createSchemaArtifactAdapter() {
		if (schemaArtifactItemProvider == null) {
			schemaArtifactItemProvider = new SchemaArtifactItemProvider(this);
		}

		return schemaArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.ldap.SecurityRoleReferenceUnit} instances.
	 * <!-- begin-user-doc
	 * --> <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityRoleReferenceUnitItemProvider securityRoleReferenceUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.ldap.SecurityRoleReferenceUnit}.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSecurityRoleReferenceUnitAdapter() {
		if (securityRoleReferenceUnitItemProvider == null) {
			securityRoleReferenceUnitItemProvider = new SecurityRoleReferenceUnitItemProvider(this);
		}

		return securityRoleReferenceUnitItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (ePersonItemProvider != null) ePersonItemProvider.dispose();
		if (inetOrgPersonItemProvider != null) inetOrgPersonItemProvider.dispose();
		if (ldapClientItemProvider != null) ldapClientItemProvider.dispose();
		if (ldapClientUnitItemProvider != null) ldapClientUnitItemProvider.dispose();
		if (ldapDeployRootItemProvider != null) ldapDeployRootItemProvider.dispose();
		if (ldapEntryItemProvider != null) ldapEntryItemProvider.dispose();
		if (ldapEntryUnitItemProvider != null) ldapEntryUnitItemProvider.dispose();
		if (ldapLdifItemProvider != null) ldapLdifItemProvider.dispose();
		if (ldapLdifUnitItemProvider != null) ldapLdifUnitItemProvider.dispose();
		if (ldapSchemaItemProvider != null) ldapSchemaItemProvider.dispose();
		if (ldapSchemaUnitItemProvider != null) ldapSchemaUnitItemProvider.dispose();
		if (ldapServerItemProvider != null) ldapServerItemProvider.dispose();
		if (ldapServerUnitItemProvider != null) ldapServerUnitItemProvider.dispose();
		if (ldapSuffixItemProvider != null) ldapSuffixItemProvider.dispose();
		if (ldapSuffixUnitItemProvider != null) ldapSuffixUnitItemProvider.dispose();
		if (ldifArtifactItemProvider != null) ldifArtifactItemProvider.dispose();
		if (organizationItemProvider != null) organizationItemProvider.dispose();
		if (organizationalPersonItemProvider != null) organizationalPersonItemProvider.dispose();
		if (personItemProvider != null) personItemProvider.dispose();
		if (schemaArtifactItemProvider != null) schemaArtifactItemProvider.dispose();
		if (securityRoleReferenceUnitItemProvider != null) securityRoleReferenceUnitItemProvider.dispose();
	}

}
