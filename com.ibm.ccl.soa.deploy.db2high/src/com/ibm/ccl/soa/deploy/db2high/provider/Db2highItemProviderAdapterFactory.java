/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.ibm.ccl.soa.deploy.db2high.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.ibm.ccl.soa.deploy.db2high.util.Db2highAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Db2highItemProviderAdapterFactory extends Db2highAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Db2highItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2BufferPool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2BufferPoolItemProvider db2BufferPoolItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2BufferPool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2BufferPoolAdapter() {
		if (db2BufferPoolItemProvider == null) {
			db2BufferPoolItemProvider = new DB2BufferPoolItemProvider(this);
		}

		return db2BufferPoolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2BufferPoolUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2BufferPoolUnitItemProvider db2BufferPoolUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2BufferPoolUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2BufferPoolUnitAdapter() {
		if (db2BufferPoolUnitItemProvider == null) {
			db2BufferPoolUnitItemProvider = new DB2BufferPoolUnitItemProvider(this);
		}

		return db2BufferPoolUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2ConstraintItemProvider db2ConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2ConstraintAdapter() {
		if (db2ConstraintItemProvider == null) {
			db2ConstraintItemProvider = new DB2ConstraintItemProvider(this);
		}

		return db2ConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2ConstraintUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2ConstraintUnitItemProvider db2ConstraintUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2ConstraintUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2ConstraintUnitAdapter() {
		if (db2ConstraintUnitItemProvider == null) {
			db2ConstraintUnitItemProvider = new DB2ConstraintUnitItemProvider(this);
		}

		return db2ConstraintUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2FieldItemProvider db2FieldItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2FieldAdapter() {
		if (db2FieldItemProvider == null) {
			db2FieldItemProvider = new DB2FieldItemProvider(this);
		}

		return db2FieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2FieldUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2FieldUnitItemProvider db2FieldUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2FieldUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2FieldUnitAdapter() {
		if (db2FieldUnitItemProvider == null) {
			db2FieldUnitItemProvider = new DB2FieldUnitItemProvider(this);
		}

		return db2FieldUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2HighRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2HighRootItemProvider db2HighRootItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2HighRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2HighRootAdapter() {
		if (db2HighRootItemProvider == null) {
			db2HighRootItemProvider = new DB2HighRootItemProvider(this);
		}

		return db2HighRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2Index} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2IndexItemProvider db2IndexItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2Index}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2IndexAdapter() {
		if (db2IndexItemProvider == null) {
			db2IndexItemProvider = new DB2IndexItemProvider(this);
		}

		return db2IndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2IndexUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2IndexUnitItemProvider db2IndexUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2IndexUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2IndexUnitAdapter() {
		if (db2IndexUnitItemProvider == null) {
			db2IndexUnitItemProvider = new DB2IndexUnitItemProvider(this);
		}

		return db2IndexUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2Manager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2ManagerItemProvider db2ManagerItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2Manager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2ManagerAdapter() {
		if (db2ManagerItemProvider == null) {
			db2ManagerItemProvider = new DB2ManagerItemProvider(this);
		}

		return db2ManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2ManagerUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2ManagerUnitItemProvider db2ManagerUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2ManagerUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2ManagerUnitAdapter() {
		if (db2ManagerUnitItemProvider == null) {
			db2ManagerUnitItemProvider = new DB2ManagerUnitItemProvider(this);
		}

		return db2ManagerUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2PartitionGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2PartitionGroupItemProvider db2PartitionGroupItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2PartitionGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2PartitionGroupAdapter() {
		if (db2PartitionGroupItemProvider == null) {
			db2PartitionGroupItemProvider = new DB2PartitionGroupItemProvider(this);
		}

		return db2PartitionGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2PartitionGroupUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2PartitionGroupUnitItemProvider db2PartitionGroupUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2PartitionGroupUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2PartitionGroupUnitAdapter() {
		if (db2PartitionGroupUnitItemProvider == null) {
			db2PartitionGroupUnitItemProvider = new DB2PartitionGroupUnitItemProvider(this);
		}

		return db2PartitionGroupUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2Permission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2PermissionItemProvider db2PermissionItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2Permission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2PermissionAdapter() {
		if (db2PermissionItemProvider == null) {
			db2PermissionItemProvider = new DB2PermissionItemProvider(this);
		}

		return db2PermissionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2PermissionUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2PermissionUnitItemProvider db2PermissionUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2PermissionUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2PermissionUnitAdapter() {
		if (db2PermissionUnitItemProvider == null) {
			db2PermissionUnitItemProvider = new DB2PermissionUnitItemProvider(this);
		}

		return db2PermissionUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2TableItemProvider db2TableItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2TableAdapter() {
		if (db2TableItemProvider == null) {
			db2TableItemProvider = new DB2TableItemProvider(this);
		}

		return db2TableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2TableSpace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2TableSpaceItemProvider db2TableSpaceItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2TableSpace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2TableSpaceAdapter() {
		if (db2TableSpaceItemProvider == null) {
			db2TableSpaceItemProvider = new DB2TableSpaceItemProvider(this);
		}

		return db2TableSpaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2TableSpaceUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2TableSpaceUnitItemProvider db2TableSpaceUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2TableSpaceUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2TableSpaceUnitAdapter() {
		if (db2TableSpaceUnitItemProvider == null) {
			db2TableSpaceUnitItemProvider = new DB2TableSpaceUnitItemProvider(this);
		}

		return db2TableSpaceUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2TableUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2TableUnitItemProvider db2TableUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2TableUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2TableUnitAdapter() {
		if (db2TableUnitItemProvider == null) {
			db2TableUnitItemProvider = new DB2TableUnitItemProvider(this);
		}

		return db2TableUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2UserItemProvider db2UserItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2UserAdapter() {
		if (db2UserItemProvider == null) {
			db2UserItemProvider = new DB2UserItemProvider(this);
		}

		return db2UserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.ibm.ccl.soa.deploy.db2high.DB2UserUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DB2UserUnitItemProvider db2UserUnitItemProvider;

	/**
	 * This creates an adapter for a {@link com.ibm.ccl.soa.deploy.db2high.DB2UserUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDB2UserUnitAdapter() {
		if (db2UserUnitItemProvider == null) {
			db2UserUnitItemProvider = new DB2UserUnitItemProvider(this);
		}

		return db2UserUnitItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (db2BufferPoolItemProvider != null) db2BufferPoolItemProvider.dispose();
		if (db2BufferPoolUnitItemProvider != null) db2BufferPoolUnitItemProvider.dispose();
		if (db2ConstraintItemProvider != null) db2ConstraintItemProvider.dispose();
		if (db2ConstraintUnitItemProvider != null) db2ConstraintUnitItemProvider.dispose();
		if (db2FieldItemProvider != null) db2FieldItemProvider.dispose();
		if (db2FieldUnitItemProvider != null) db2FieldUnitItemProvider.dispose();
		if (db2HighRootItemProvider != null) db2HighRootItemProvider.dispose();
		if (db2IndexItemProvider != null) db2IndexItemProvider.dispose();
		if (db2IndexUnitItemProvider != null) db2IndexUnitItemProvider.dispose();
		if (db2ManagerItemProvider != null) db2ManagerItemProvider.dispose();
		if (db2ManagerUnitItemProvider != null) db2ManagerUnitItemProvider.dispose();
		if (db2PartitionGroupItemProvider != null) db2PartitionGroupItemProvider.dispose();
		if (db2PartitionGroupUnitItemProvider != null) db2PartitionGroupUnitItemProvider.dispose();
		if (db2PermissionItemProvider != null) db2PermissionItemProvider.dispose();
		if (db2PermissionUnitItemProvider != null) db2PermissionUnitItemProvider.dispose();
		if (db2TableItemProvider != null) db2TableItemProvider.dispose();
		if (db2TableSpaceItemProvider != null) db2TableSpaceItemProvider.dispose();
		if (db2TableSpaceUnitItemProvider != null) db2TableSpaceUnitItemProvider.dispose();
		if (db2TableUnitItemProvider != null) db2TableUnitItemProvider.dispose();
		if (db2UserItemProvider != null) db2UserItemProvider.dispose();
		if (db2UserUnitItemProvider != null) db2UserUnitItemProvider.dispose();
	}

}
