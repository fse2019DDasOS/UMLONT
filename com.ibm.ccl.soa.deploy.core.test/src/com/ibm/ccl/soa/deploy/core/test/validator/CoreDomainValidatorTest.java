/*******************************************************************************
 * Copyright (c) 2003, 2007 IBM Corporation Licensed Material - Property of IBM. All rights reserved.
 *  
 * US Government Users Restricted Rights - Use, duplication or disclosure v1.0 restricted by GSA ADP
 * Schedule Contract with IBM Corp.
 * 
 * Contributors: IBM Corporation - initial API and implementation
 *******************************************************************************/
package com.ibm.ccl.soa.deploy.core.test.validator;

import java.io.IOException;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IMarker;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.wst.common.frameworks.datamodel.IDataModelOperation;

import com.ibm.ccl.soa.deploy.core.CoreFactory;
import com.ibm.ccl.soa.deploy.core.CorePackage;
import com.ibm.ccl.soa.deploy.core.DependencyLink;
import com.ibm.ccl.soa.deploy.core.DeployCoreRoot;
import com.ibm.ccl.soa.deploy.core.Requirement;
import com.ibm.ccl.soa.deploy.core.Topology;
import com.ibm.ccl.soa.deploy.core.Unit;
import com.ibm.ccl.soa.deploy.core.datamodels.CreateTopologyDataModel;
import com.ibm.ccl.soa.deploy.core.test.TopologyTestCase;
import com.ibm.ccl.soa.deploy.core.util.CoreResourceFactoryImpl;
import com.ibm.ccl.soa.deploy.core.validator.DeployValidatorService;
import com.ibm.ccl.soa.deploy.core.validator.status.ICoreProblemType;
import com.ibm.ccl.soa.deploy.internal.core.validator.DeployValidationContext;
import com.ibm.ccl.soa.deploy.internal.core.validator.TopologyMarkerFactory;

/**
 * Tests the {@link CoreDeployValidator} class.
 */
public class CoreDomainValidatorTest extends TopologyTestCase {

	private static final String PROJECT_NAME = "CoreDeployValidatorTest";

	/** Shared validator instance. */
	private DeployValidatorService validator;

	public CoreDomainValidatorTest() {
		super(PROJECT_NAME);
		validator = new DeployValidatorService();
	}

	/**
	 * Implemented by testers of topology markers generated by validators.
	 */
	public interface TopologyMarkerTest {
		/**
		 * Checks the deploy status generated by the validators.
		 * 
		 * @param markers
		 *            the markers generated by the validator.
		 * @param topology
		 *            TODO
		 */
		public void check(IMarker[] markers, Topology topology)
				throws CoreException;
	}

	/**
	 * Validates the topology using the specified test.
	 * <p>
	 * The validation sequence is:
	 * <ol>
	 * <li> Clear all markers,
	 * <li> Save the topology resource,
	 * <li> Invoke the checker,
	 * <li> Unload the topology resource,
	 * <li> Load the topology resource,
	 * <li> Invoke the checker,
	 * <li> Clear all markers.
	 * </ol>
	 * 
	 * @param top
	 *            the topology to be validated (must be associated with a
	 *            resource)
	 * @param test
	 *            the marker checker (throws exception on error).
	 * 
	 * @throws IOException
	 *             if an error occurs when saving or loading the resource.
	 * @throws CoreException
	 */
	private void internalValidate(Topology top, TopologyMarkerTest test)
			throws IOException, CoreException {
		assert top != null;
		assert TopologyMarkerFactory.getIFile(top) != null;
		assert test != null;

		Resource res = top.getEObject().eResource();
		res.save(null);

		// Check setting of markers
		TopologyMarkerFactory.deleteDeployMarkers(top);
		validator.validate(new DeployValidationContext(top, validator,
				new NullProgressMonitor()), createDeployReporter());
		IMarker[] markers = TopologyMarkerFactory.getMarkers(top);
		test.check(markers, top);

		// Reload topology
		res.unload();
		res.load(null);
		DeployCoreRoot deployCoreRoot = (DeployCoreRoot) res.getContents().get(
				0);
		assert deployCoreRoot != null;
		top = deployCoreRoot.getTopology();
		assert top != null;
		assert TopologyMarkerFactory.getIFile(top) != null;

		// Check persistence of markers
		markers = TopologyMarkerFactory.getMarkers(top);
		test.check(markers, top);

		TopologyMarkerFactory.deleteDeployMarkers(top);
	}

	/**
	 * Tests the warning on units with no consumed or provided services.
	 */
	public void testUnitWithNoServices() throws IOException, CoreException {
		final Topology top = createTopology("unitWithUnlinkedConsumedService");

		final Unit unit = CoreFactory.eINSTANCE.createUnit();
		unit.setName("unit");
		top.getUnits().add(unit);

		internalValidate(top, new TopologyMarkerTest() {
			public void check(IMarker[] markers, Topology topology)
					throws CoreException {
				assert markers.length == 1;
				Unit unitRef = (Unit) TopologyMarkerFactory
						.getDeployModelObject(top, markers[0]);
				assert markers[0].getAttribute(IMarker.SEVERITY).equals(
						new Integer(IMarker.SEVERITY_WARNING));
				assert unitRef.getName().equals(unit.getName());
				// TODO check type of marker
			}
		});
	}

	/**
	 * Tests the error on two units with the same name.
	 */
	public void testUnitWithSameName() throws IOException, CoreException {
		final Topology top = createTopology("testUnitWithSameName");

		final Unit unit = CoreFactory.eINSTANCE.createUnit();
		unit.setName("unit");
		top.getUnits().add(unit);
		assert unit.getStatus().getSeverity() == IStatus.OK;

		final Unit unit2 = CoreFactory.eINSTANCE.createUnit();
		unit2.setName("unit");
		top.getUnits().add(unit2);
		assert unit.getStatus().getSeverity() == IStatus.OK;

		internalValidate(top, new TopologyMarkerTest() {
			public void check(IMarker[] markers, Topology topology)
					throws CoreException {
				dumpStatus(top);
				assertMarkerExists(markers,
						ICoreProblemType.OBJECT_ATTRIBUTE_NOT_UNIQUE, unit
								.getFullPath());
				assertMarkerExists(markers,
						ICoreProblemType.OBJECT_ATTRIBUTE_NOT_UNIQUE, unit2
								.getFullPath());
			}
		});
	}

	/**
	 * Tests the detection of an unlinked consumed service.
	 */
	public void testUnitWithUnlinkedRequirementService() throws IOException,
			CoreException {
		final Topology top = createTopology("unitWithUnlinkedConsumedService");

		final Unit unit = CoreFactory.eINSTANCE.createUnit();
		unit.setName("unit");
		top.getUnits().add(unit);

		final Requirement req = CoreFactory.eINSTANCE.createRequirement();
		req.setName("requirement");
		req.setDmoEType(CorePackage.eINSTANCE.getCapability());
		unit.getRequirements().add(req);

		internalValidate(top, new TopologyMarkerTest() {
			public void check(IMarker[] markers, Topology topology) {
				assert markers.length == 1;
				Requirement reqRef = (Requirement) TopologyMarkerFactory
						.getDeployModelObject(top, markers[0]);
				assert reqRef.getName().equals(req.getName());
				// TODO check type of marker
			}
		});
	}

	/**
	 * Tests the detection of an unlinked consumed service.
	 */
	public void testDependencyLinkWithoutTarget() throws IOException,
			CoreException {
		final Topology top = createTopology("serviceLinkWithoutTarget");

		final Unit unit = CoreFactory.eINSTANCE.createUnit();
		unit.setName("unit");
		top.getUnits().add(unit);

		final Requirement req = CoreFactory.eINSTANCE.createRequirement();
		req.setName("requirement");
		req.setDmoEType(CorePackage.eINSTANCE.getCapability());
		unit.getRequirements().add(req);

		final DependencyLink link = CoreFactory.eINSTANCE
				.createDependencyLink();
		link.setName("dependencyLink");
		req.setLink(link);
		assert link.getSource().equals(req);
		assert req.getLink().equals(link);

		internalValidate(top, new TopologyMarkerTest() {
			public void check(IMarker[] markers, Topology topology) {
				assert markers.length == 1;
				DependencyLink linkRef = (DependencyLink) TopologyMarkerFactory
						.getDeployModelObject(top, markers[0]);
				assert linkRef.getName().equals(link.getName());
				// TODO check type of marker
			}
		});
	}

	public void testInconsistentTopologyNamespaceAndName()
			throws ExecutionException, IOException, CoreException {
		CreateTopologyDataModel typesafeModel = CreateTopologyDataModel
				.createModel();
		typesafeModel.setTopologyName("Test1");
		// Use source folder as the container.
		typesafeModel.setSourcePath("testInconsistentTopologyNamespaceAndName" + System.getProperty( "file.separator" ) + "topologies");
		typesafeModel.setNamespacePath("com.acme.test");
		IDataModelOperation op = typesafeModel.createConfiguredOperation();
		IProgressMonitor monitor = new NullProgressMonitor();
		IStatus status = op.execute(monitor, null);
		assertTrue(status.isOK());

		IFile topologyFile = typesafeModel.getTopologyFile();
		final Topology topology1 = loadTopology(topologyFile);

		validate(topology1);
		assertHasNoErrorStatus(topology1);

		final Topology topology2 = loadTopology(topologyFile);
		// Change the name and namespace.
		topology2.setName("Test2");
		topology2.setNamespace("com.acme.test2");

		validate(topology2);
		assertHasDeployAttributeStatus(topology2,
				ICoreProblemType.OBJECT_ATTRIBUTE_INVALID, IStatus.ERROR,
				CorePackage.Literals.DEPLOY_MODEL_OBJECT__NAME);
		assertHasDeployAttributeStatus(topology2,
				ICoreProblemType.OBJECT_ATTRIBUTE_INVALID, IStatus.ERROR,
				CorePackage.Literals.TOPOLOGY__NAMESPACE);
	}

	public void testInconsistentTopologyDefaultNamespaceAndName()
			throws ExecutionException, IOException, CoreException {
		CreateTopologyDataModel typesafeModel = CreateTopologyDataModel
				.createModel();
		typesafeModel.setTopologyName("Test1");
		// Use source folder as the container.
		typesafeModel
				.setSourcePath("testInconsistentTopologyDefaultNamespaceAndName" + System.getProperty( "file.separator" ) + "topologies");
		IDataModelOperation op = typesafeModel.createConfiguredOperation();
		IProgressMonitor monitor = new NullProgressMonitor();
		IStatus status = op.execute(monitor, null);
		assertTrue(status.isOK());

		IFile topologyFile = typesafeModel.getTopologyFile();
		final Topology topology1 = loadTopology(topologyFile);

		validate(topology1);
		assertHasNoErrorStatus(topology1);

		final Topology topology2 = loadTopology(topologyFile);
		// Change the name and namespace.
		topology2.setName("Test2");
		topology2.setNamespace("com.acme");

		validate(topology2);
		assertHasDeployAttributeStatus(topology2,
				ICoreProblemType.OBJECT_ATTRIBUTE_INVALID, IStatus.ERROR,
				CorePackage.Literals.DEPLOY_MODEL_OBJECT__NAME);
		assertHasDeployAttributeStatus(topology2,
				ICoreProblemType.OBJECT_ATTRIBUTE_INVALID, IStatus.ERROR,
				CorePackage.Literals.TOPOLOGY__NAMESPACE);
	}

	private Topology loadTopology(IFile topologyFile) throws IOException {
		CoreResourceFactoryImpl resFactory = new CoreResourceFactoryImpl();
		Resource resource = resFactory.createResource(URI
				.createPlatformResourceURI(topologyFile.getFullPath()
						.toString()));
		resource.load(null);
		assertFalse(resource.getContents().isEmpty());
		DeployCoreRoot root = (DeployCoreRoot) resource.getContents().get(0);
		Topology topology = root.getTopology();
		assertNotNull(topology);
		return topology;
	}
}
