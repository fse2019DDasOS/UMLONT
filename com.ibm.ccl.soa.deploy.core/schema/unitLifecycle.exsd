<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="com.ibm.ccl.soa.deploy.core">
<annotation>
      <appInfo>
         <meta.schema plugin="com.ibm.ccl.soa.deploy.core" id="unitLifecycle" name="SOA Topology Unit Lifecycle"/>
      </appInfo>
      <documentation>
         This extension point is used to group the elements that adapt elements from the environment (or workspace) to a Unit definition in the model (i.e., the unitProvider). The unitPublisher is used to define a publisher for a specific unit type. This may be used by any publisher that wishes but more than likely it will just be used by the DevelopmentTimeTopologyPublisher which will be an impelementation of the &lt;b&gt;topology&lt;/b&gt; extension point.
&lt;p&gt;
[Add more description.]
&lt;/p&gt;
      </documentation>
   </annotation>

   <include schemaLocation="schema://org.eclipse.core.expressions/schema/expressionLanguage.exsd"/>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="unitProvider" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="unitFilter" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="unitDiscoverer" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="unitProvider">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            Use to create a unit based on various inputs.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="inputEnablement"/>
            <element ref="outputEnablement" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  Provide a translateable name that can be exposed to users in dialogs and wizards.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  Provide a translateable description that can be used to explain to the user what source elements may be adapted to be displayed in the Topology Editor.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The implementation of the unit provider.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="com.ibm.ccl.soa.deploy.core.UnitProvider"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="unitFilter">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            Provide a list of unit filters. An example usage is to implement logic for what other units this unit can host.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="inputEnablement"/>
            <element ref="outputEnablement" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  Provide a translateable name that can be exposed to users in dialogs and wizards.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  Provide a translateable description that can be used to explain to the user what source elements may be adapted to be displayed in the Topology Editor.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The implementation of the unit filter.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="com.ibm.ccl.soa.deploy.core.UnitFilter"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="unitDiscoverer">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            Provide a list of unit discoverers. An example is the find the other units which this unit requires to fulfill it&apos;s hosting capabilities.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="inputEnablement"/>
            <element ref="outputEnablement"/>
         </sequence>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  Provide a translateable name that can be exposed to users in dialogs and wizards.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  Provide a translateable description that can be used to explain to the user what source elements may be adapted to be displayed in the Topology Editor.
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The implementation of the unit discoverer.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="com.ibm.ccl.soa.deploy.core.UnitDiscoverer"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="inputEnablement">
      <annotation>
         <documentation>
            Describe the set of objects that the implementation of &lt;code&gt;com.ibm.ccl.soa.deploy.core.UnitProvider&lt;/code&gt; and others may accept as input.
         </documentation>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="not"/>
            <element ref="and"/>
            <element ref="or"/>
            <element ref="instanceof"/>
            <element ref="test"/>
            <element ref="systemTest"/>
            <element ref="equals"/>
            <element ref="count"/>
            <element ref="with"/>
            <element ref="resolve"/>
            <element ref="adapt"/>
            <element ref="iterate"/>
         </sequence>
      </complexType>
   </element>

   <element name="outputEnablement">
      <annotation>
         <documentation>
            Describe the set of objects that the implementation of &lt;code&gt;com.ibm.ccl.soa.deploy.core.UnitProvider&lt;/code&gt; and others may generate as output.
         </documentation>
      </annotation>
      <complexType>
         <sequence minOccurs="0" maxOccurs="unbounded">
            <element ref="not"/>
            <element ref="and"/>
            <element ref="or"/>
            <element ref="instanceof"/>
            <element ref="test"/>
            <element ref="systemTest"/>
            <element ref="equals"/>
            <element ref="count"/>
            <element ref="with"/>
            <element ref="resolve"/>
            <element ref="adapt"/>
            <element ref="iterate"/>
         </sequence>
      </complexType>
   </element>

   <element name="unitAmplifier">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
         <documentation>
            Provide a list of unit amplifiers. The Unit Amplifier allows for external tools to populate unbound units.
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="inputEnablement"/>
            <element ref="outputEnablement"/>
         </sequence>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The implementation of the unit amplifier.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="com.ibm.ccl.soa.deploy.core.UnitAmplifier:"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  Provide a translateable name that can be exposed to users in dialogs and wizards.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  Provide a translateable description that can be used to explain to the user what source elements may be adapted to be displayed in the Topology Editor.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="label" type="string">
            <annotation>
               <documentation>
                  Used to set a ui construct for values returned from the class
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         1.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         ... filler for now 

The &lt;i&gt;fooBar&lt;/i&gt; extension allows a client to define a new design variable
for the Workflow palette. Each &lt;i&gt;fooBar&lt;/i&gt; extension defines two
attributes, a text value and a programming language for which the design
variable may be used.

&lt;p&gt;
The following example declares a new design variable &quot;bobdole&quot; for all
programming languages.
&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;

  &lt;extension point=&quot;org.acme.fooBar&quot;&gt;
    &lt;fooBar
       designVariable = &quot;bobdole&quot;
       language = &quot;*&quot;
       /&gt;
    &lt;/fooBar&gt;
  &lt;/extension&gt;
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         This extension point is published API and will only incur non-breaking
changes in future releases.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2005, 2006 IBM Corporation.
Licensed Material - Property of IBM. All rights reserved.
US Government Users Restricted Rights - Use, duplication or disclosure
restricted by GSA ADP Schedule Contract with IBM Corp.

Contributors:
 IBM Corporation - initial API and implementation
      </documentation>
   </annotation>

</schema>
