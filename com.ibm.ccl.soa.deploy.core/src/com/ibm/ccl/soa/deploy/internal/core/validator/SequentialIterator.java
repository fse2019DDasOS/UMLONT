/*******************************************************************************
 * Copyright (c) 2003, 2007 IBM Corporation Licensed Material - Property of IBM. All rights reserved.
 *  
 * US Government Users Restricted Rights - Use, duplication or disclosure v1.0 restricted by GSA ADP
 * Schedule Contract with IBM Corp.
 * 
 * Contributors: IBM Corporation - initial API and implementation
 *******************************************************************************/
package com.ibm.ccl.soa.deploy.internal.core.validator;

import java.util.Iterator;

/**
 * Joins two iterators in a mutable sequence.
 */
public class SequentialIterator implements Iterator {
	protected final Iterator iter1;

	protected final Iterator iter2;

	protected Iterator lastIter = null;

	/**
	 * Constructs an iterator over the joint sequence generated by iter1 and iter2.
	 * 
	 * @param iter1
	 *           an iterator
	 * @param iter2
	 *           an iterator
	 */
	public SequentialIterator(Iterator iter1, Iterator iter2) {
		assert iter1 != null;
		assert iter2 != null;

		this.iter1 = iter1;
		this.iter2 = iter2;
	}

	/*
	 * @see java.util.Iterator#hasNext()
	 */
	public boolean hasNext() {
		return iter1.hasNext() || iter2.hasNext();
	}

	/*
	 * @see java.util.Iterator#next()
	 */
	public Object next() {
		if (iter1.hasNext()) {
			lastIter = iter1;
			return iter1.next();
		}
		lastIter = iter2;
		return iter2.next();
	}

	/*
	 * @see java.util.Iterator#remove()
	 */
	public void remove() {
		if (lastIter == null) {
			throw new IllegalStateException();
		}
		lastIter.remove();
	}
}
